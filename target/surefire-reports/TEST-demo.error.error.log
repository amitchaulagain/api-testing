13:17:33.190 request:
1 > POST http://127.0.0.1:58351/cats
1 > Accept-Encoding: gzip,deflate
1 > Connection: Keep-Alive
1 > Content-Length: 11
1 > Content-Type: application/json; charset=UTF-8
1 > Host: 127.0.0.1:58351
1 > User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)
{ "name": }

13:17:33.245 response time in milliseconds: 49
1 < 400
1 < Cache-Control: no-cache, no-store, max-age=0, must-revalidate
1 < Connection: close
1 < Content-Type: application/json;charset=UTF-8
1 < Date: Thu, 20 Sep 2018 07:32:32 GMT
1 < Expires: 0
1 < Pragma: no-cache
1 < Transfer-Encoding: chunked
1 < X-Content-Type-Options: nosniff
1 < X-Frame-Options: DENY
1 < X-XSS-Protection: 1; mode=block
{"timestamp":1537428753214,"status":400,"error":"Bad Request","exception":"org.springframework.http.converter.HttpMessageNotReadableException","message":"Could not read JSON document: Unexpected character ('}' (code 125)): expected a value\n at [Source: java.io.PushbackInputStream@304849c3; line: 1, column: 12]; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('}' (code 125)): expected a value\n at [Source: java.io.PushbackInputStream@304849c3; line: 1, column: 12]","path":"/cats"}

13:17:33.276 request:
1 > POST http://127.0.0.1:58351/echo
1 > Accept-Encoding: gzip,deflate
1 > Connection: Keep-Alive
1 > Content-Length: 10
1 > Content-Type: text/plain; charset=UTF-8
1 > Host: 127.0.0.1:58351
1 > User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)
{ "foo": }

13:17:33.283 response time in milliseconds: 6
1 < 200
1 < Cache-Control: no-cache, no-store, max-age=0, must-revalidate
1 < Content-Length: 10
1 < Content-Type: text/plain;charset=UTF-8
1 < Date: Thu, 20 Sep 2018 07:32:32 GMT
1 < Expires: 0
1 < Pragma: no-cache
1 < X-Content-Type-Options: nosniff
1 < X-Frame-Options: DENY
1 < X-XSS-Protection: 1; mode=block
{ "foo": }

13:17:33.283 json parsing failed, response data type set to string: net.minidev.json.parser.ParseException: Unexpected character (}) at position 9.
variable called 'authInfo' used in headers-single.feature
    config.authInfo = { authTime: result.time, authToken: result.token };
  }
  return config;
}
13:06:49.492 >> lock acquired, begin callSingle: classpath:demo/headers/common-noheaders.feature
13:06:49.498 request:
1 > GET http://127.0.0.1:8080/headers
1 > Accept-Encoding: gzip,deflate
1 > Connection: Keep-Alive
1 > Host: 127.0.0.1:8080
1 > User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)

13:06:49.498 org.apache.http.conn.HttpHostConnectException: Connect to 127.0.0.1:8080 [/127.0.0.1] failed: Connection refused (Connection refused), http call failed after 0 milliseconds for URL: http://127.0.0.1:8080/headers
13:06:49.498 http request failed: 
org.apache.http.conn.HttpHostConnectException: Connect to 127.0.0.1:8080 [/127.0.0.1] failed: Connection refused (Connection refused)
13:06:49.499 feature call failed: classpath:demo/headers/common-noheaders.feature
arg: [object Object]


org.apache.http.conn.HttpHostConnectException: Connect to 127.0.0.1:8080 [/127.0.0.1] failed: Connection refused (Connection refused)
13:06:49.499 javascript function call failed: 


org.apache.http.conn.HttpHostConnectException: Connect to 127.0.0.1:8080 [/127.0.0.1] failed: Connection refused (Connection refused)
13:06:49.499 failed function body: function() {
  karate.configure('connectTimeout', 5000);
  karate.configure('readTimeout', 5000);  
  var port = karate.properties['demo.server.port'];  
  if (!port) {
    port = karate.env == 'web' ? 8090 : 8080;
  }
  var protocol = 'http';
  if (karate.properties['demo.server.https'] == 'true') {
    protocol = 'https';
    karate.configure('ssl', true);
  }  
  var config = { demoBaseUrl: protocol + '://127.0.0.1:' + port };
  if (karate.env == 'proxy') {
    var proxyPort = karate.properties['demo.proxy.port']
    karate.configure('proxy', 'http://127.0.0.1:' + proxyPort);
  }
  if (karate.env != 'mock' && karate.env != 'proxy' && karate.env != 'contract') {
    // 'callSingle' is guaranteed to run only once even across all threads
    var result = karate.callSingle('classpath:demo/headers/common-noheaders.feature', config);
    // and it sets a variable called 'authInfo' used in headers-single.feature
    config.authInfo = { authTime: result.time, authToken: result.token };
  }
  return config;
}
