[
  {
    "line": 1,
    "elements": [
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 11218120,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 42,
        "name": "using a javascript function to pre-process the search parameters",
        "description": "  this particular example has been deliberately over-complicated, the next scenario-outline below is simpler",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;using-a-javascript-function-to-pre-process-the-search-parameters;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 89032,
              "status": "passed"
            },
            "line": 10,
            "name": "def query \u003d { name: \u0027foo\u0027, country: \u0027IN\u0027, active: \u0027true\u0027, limit: \u00271\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027foo\u0027, country: \u0027IN\u0027, active: \u0027true\u0027, limit: \u00271\u0027 }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 4229672,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# all this function does is to set any empty string value to null, because that is what empty cells in \u0027Examples\u0027 become"
              }
            ],
            "line": 12,
            "name": "def nullify \u003d",
            "match": {
              "arguments": [
                {
                  "val": "nullify",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 13,
              "value": "function(o) {\n  for (var key in o) {\n    if (o[key] \u003d\u003d \u0027\u0027) o[key] \u003d null;\n  }\n  return o;\n}"
            }
          },
          {
            "result": {
              "duration": 7026362,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# here we load a java-script function from a re-usable file"
              }
            ],
            "line": 22,
            "name": "def getResponseParam \u003d read(\u0027get-response-param.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam",
                  "offset": 4
                },
                {
                  "val": "read(\u0027get-response-param.js\u0027)",
                  "offset": 23
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 6325527,
              "status": "passed"
            },
            "line": 23,
            "name": "def query \u003d nullify(query)",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "nullify(query)",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 230175,
              "status": "passed"
            },
            "line": 24,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 24,
              "value": "13:17:34.314 [print] {\n  \"name\": \"foo\",\n  \"country\": \"IN\",\n  \"active\": \"true\",\n  \"limit\": \"1\"\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 1978207,
              "status": "passed"
            },
            "line": 26,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 64099,
              "status": "passed"
            },
            "comments": [
              {
                "line": 27,
                "value": "# the \u0027params\u0027 keyword takes json, and will ignore any key that has a null value"
              }
            ],
            "line": 28,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8635431,
              "status": "passed"
            },
            "line": 29,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 29,
              "value": "13:17:34.320 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dfoo\u0026country\u003dIN\u0026active\u003dtrue\u0026limit\u003d1\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.326 response time in milliseconds: 5\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:33 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"foo\"],\"country\":[\"IN\"],\"active\":[\"true\"],\"limit\":[\"1\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 106443,
              "status": "passed"
            },
            "line": 30,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17104317,
              "status": "passed"
            },
            "line": 32,
            "name": "assert getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13836804,
              "status": "passed"
            },
            "line": 33,
            "name": "assert getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14249989,
              "status": "passed"
            },
            "line": 34,
            "name": "assert getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12502059,
              "status": "passed"
            },
            "line": 35,
            "name": "assert getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 239804,
              "status": "passed"
            },
            "comments": [
              {
                "line": 37,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 38,
            "name": "match response !contains { \u0027\u0027: \u0027#notnull\u0027 }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " { \u0027\u0027: \u0027#notnull\u0027 }",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 10224775,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 43,
        "name": "using a javascript function to pre-process the search parameters",
        "description": "  this particular example has been deliberately over-complicated, the next scenario-outline below is simpler",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;using-a-javascript-function-to-pre-process-the-search-parameters;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 223766,
              "status": "passed"
            },
            "line": 10,
            "name": "def query \u003d { name: \u0027bar\u0027, country: \u0027\u0027, active: \u0027\u0027, limit: \u00275\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027bar\u0027, country: \u0027\u0027, active: \u0027\u0027, limit: \u00275\u0027 }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 203337,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# all this function does is to set any empty string value to null, because that is what empty cells in \u0027Examples\u0027 become"
              }
            ],
            "line": 12,
            "name": "def nullify \u003d",
            "match": {
              "arguments": [
                {
                  "val": "nullify",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 13,
              "value": "function(o) {\n  for (var key in o) {\n    if (o[key] \u003d\u003d \u0027\u0027) o[key] \u003d null;\n  }\n  return o;\n}"
            }
          },
          {
            "result": {
              "duration": 3698843,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# here we load a java-script function from a re-usable file"
              }
            ],
            "line": 22,
            "name": "def getResponseParam \u003d read(\u0027get-response-param.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam",
                  "offset": 4
                },
                {
                  "val": "read(\u0027get-response-param.js\u0027)",
                  "offset": 23
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 6446197,
              "status": "passed"
            },
            "line": 23,
            "name": "def query \u003d nullify(query)",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "nullify(query)",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 478658,
              "status": "passed"
            },
            "line": 24,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 24,
              "value": "13:17:34.411 [print] {\n  \"name\": \"bar\",\n  \"country\": null,\n  \"active\": null,\n  \"limit\": \"5\"\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 1528898,
              "status": "passed"
            },
            "line": 26,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 84031,
              "status": "passed"
            },
            "comments": [
              {
                "line": 27,
                "value": "# the \u0027params\u0027 keyword takes json, and will ignore any key that has a null value"
              }
            ],
            "line": 28,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8938127,
              "status": "passed"
            },
            "line": 29,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 29,
              "value": "13:17:34.417 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dbar\u0026limit\u003d5\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.423 response time in milliseconds: 6\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:33 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"bar\"],\"limit\":[\"5\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 72637,
              "status": "passed"
            },
            "line": 30,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 977836,
              "status": "passed"
            },
            "line": 32,
            "name": "assert getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1114354,
              "status": "passed"
            },
            "line": 33,
            "name": "assert getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1124168,
              "status": "passed"
            },
            "line": 34,
            "name": "assert getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13727848,
              "status": "passed"
            },
            "line": 35,
            "name": "assert getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 238143,
              "status": "passed"
            },
            "comments": [
              {
                "line": 37,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 38,
            "name": "match response !contains { \u0027country\u0027: \u0027#notnull\u0027 }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " { \u0027country\u0027: \u0027#notnull\u0027 }",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 9842916,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 44,
        "name": "using a javascript function to pre-process the search parameters",
        "description": "  this particular example has been deliberately over-complicated, the next scenario-outline below is simpler",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;using-a-javascript-function-to-pre-process-the-search-parameters;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 167054,
              "status": "passed"
            },
            "line": 10,
            "name": "def query \u003d { name: \u0027baz\u0027, country: \u0027JP\u0027, active: \u0027\u0027, limit: \u0027\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027baz\u0027, country: \u0027JP\u0027, active: \u0027\u0027, limit: \u0027\u0027 }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 195575,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# all this function does is to set any empty string value to null, because that is what empty cells in \u0027Examples\u0027 become"
              }
            ],
            "line": 12,
            "name": "def nullify \u003d",
            "match": {
              "arguments": [
                {
                  "val": "nullify",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 13,
              "value": "function(o) {\n  for (var key in o) {\n    if (o[key] \u003d\u003d \u0027\u0027) o[key] \u003d null;\n  }\n  return o;\n}"
            }
          },
          {
            "result": {
              "duration": 1190236,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# here we load a java-script function from a re-usable file"
              }
            ],
            "line": 22,
            "name": "def getResponseParam \u003d read(\u0027get-response-param.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam",
                  "offset": 4
                },
                {
                  "val": "read(\u0027get-response-param.js\u0027)",
                  "offset": 23
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 5124199,
              "status": "passed"
            },
            "line": 23,
            "name": "def query \u003d nullify(query)",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "nullify(query)",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 912109,
              "status": "passed"
            },
            "line": 24,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 24,
              "value": "13:17:34.464 [print] {\n  \"name\": \"baz\",\n  \"country\": \"JP\",\n  \"active\": null,\n  \"limit\": null\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 7737247,
              "status": "passed"
            },
            "line": 26,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33400,
              "status": "passed"
            },
            "comments": [
              {
                "line": 27,
                "value": "# the \u0027params\u0027 keyword takes json, and will ignore any key that has a null value"
              }
            ],
            "line": 28,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5520461,
              "status": "passed"
            },
            "line": 29,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 29,
              "value": "13:17:34.475 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dbaz\u0026country\u003dJP\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.479 response time in milliseconds: 4\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:33 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"baz\"],\"country\":[\"JP\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 30043,
              "status": "passed"
            },
            "line": 30,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8341769,
              "status": "passed"
            },
            "line": 32,
            "name": "assert getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1261332,
              "status": "passed"
            },
            "line": 33,
            "name": "assert getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1675786,
              "status": "passed"
            },
            "line": 34,
            "name": "assert getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 374643,
              "status": "passed"
            },
            "line": 35,
            "name": "assert getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 122807,
              "status": "passed"
            },
            "comments": [
              {
                "line": 37,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 38,
            "name": "match response !contains { \u0027active\u0027: \u0027#notnull\u0027 }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " { \u0027active\u0027: \u0027#notnull\u0027 }",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 5071507,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 45,
        "name": "using a javascript function to pre-process the search parameters",
        "description": "  this particular example has been deliberately over-complicated, the next scenario-outline below is simpler",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;using-a-javascript-function-to-pre-process-the-search-parameters;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 77694,
              "status": "passed"
            },
            "line": 10,
            "name": "def query \u003d { name: \u0027\u0027, country: \u0027US\u0027, active: \u0027\u0027, limit: \u00273\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027\u0027, country: \u0027US\u0027, active: \u0027\u0027, limit: \u00273\u0027 }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 1185433,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# all this function does is to set any empty string value to null, because that is what empty cells in \u0027Examples\u0027 become"
              }
            ],
            "line": 12,
            "name": "def nullify \u003d",
            "match": {
              "arguments": [
                {
                  "val": "nullify",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 13,
              "value": "function(o) {\n  for (var key in o) {\n    if (o[key] \u003d\u003d \u0027\u0027) o[key] \u003d null;\n  }\n  return o;\n}"
            }
          },
          {
            "result": {
              "duration": 4431191,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# here we load a java-script function from a re-usable file"
              }
            ],
            "line": 22,
            "name": "def getResponseParam \u003d read(\u0027get-response-param.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam",
                  "offset": 4
                },
                {
                  "val": "read(\u0027get-response-param.js\u0027)",
                  "offset": 23
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 3721047,
              "status": "passed"
            },
            "line": 23,
            "name": "def query \u003d nullify(query)",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "nullify(query)",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 207561,
              "status": "passed"
            },
            "line": 24,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 24,
              "value": "13:17:34.508 [print] {\n  \"name\": null,\n  \"country\": \"US\",\n  \"active\": null,\n  \"limit\": \"3\"\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 491724,
              "status": "passed"
            },
            "line": 26,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 23938,
              "status": "passed"
            },
            "comments": [
              {
                "line": 27,
                "value": "# the \u0027params\u0027 keyword takes json, and will ignore any key that has a null value"
              }
            ],
            "line": 28,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2712930,
              "status": "passed"
            },
            "line": 29,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 29,
              "value": "13:17:34.510 request:\n1 \u003e GET http://127.0.0.1:58351/search?country\u003dUS\u0026limit\u003d3\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.512 response time in milliseconds: 2\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:33 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"country\":[\"US\"],\"limit\":[\"3\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 28823,
              "status": "passed"
            },
            "line": 30,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 438647,
              "status": "passed"
            },
            "line": 32,
            "name": "assert getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 320660,
              "status": "passed"
            },
            "line": 33,
            "name": "assert getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 325369,
              "status": "passed"
            },
            "line": 34,
            "name": "assert getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 346636,
              "status": "passed"
            },
            "line": 35,
            "name": "assert getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 113499,
              "status": "passed"
            },
            "comments": [
              {
                "line": 37,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 38,
            "name": "match response !contains { \u0027name\u0027: \u0027#notnull\u0027 }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " { \u0027name\u0027: \u0027#notnull\u0027 }",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 3264110,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 46,
        "name": "using a javascript function to pre-process the search parameters",
        "description": "  this particular example has been deliberately over-complicated, the next scenario-outline below is simpler",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;using-a-javascript-function-to-pre-process-the-search-parameters;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 57885,
              "status": "passed"
            },
            "line": 10,
            "name": "def query \u003d { name: \u0027\u0027, country: \u0027\u0027, active: \u0027false\u0027, limit: \u0027\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027\u0027, country: \u0027\u0027, active: \u0027false\u0027, limit: \u0027\u0027 }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 87864,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# all this function does is to set any empty string value to null, because that is what empty cells in \u0027Examples\u0027 become"
              }
            ],
            "line": 12,
            "name": "def nullify \u003d",
            "match": {
              "arguments": [
                {
                  "val": "nullify",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 13,
              "value": "function(o) {\n  for (var key in o) {\n    if (o[key] \u003d\u003d \u0027\u0027) o[key] \u003d null;\n  }\n  return o;\n}"
            }
          },
          {
            "result": {
              "duration": 3049989,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# here we load a java-script function from a re-usable file"
              }
            ],
            "line": 22,
            "name": "def getResponseParam \u003d read(\u0027get-response-param.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam",
                  "offset": 4
                },
                {
                  "val": "read(\u0027get-response-param.js\u0027)",
                  "offset": 23
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 488323,
              "status": "passed"
            },
            "line": 23,
            "name": "def query \u003d nullify(query)",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "nullify(query)",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 192265,
              "status": "passed"
            },
            "line": 24,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 24,
              "value": "13:17:34.523 [print] {\n  \"name\": null,\n  \"country\": null,\n  \"active\": \"false\",\n  \"limit\": null\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 109246,
              "status": "passed"
            },
            "line": 26,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 307561,
              "status": "passed"
            },
            "comments": [
              {
                "line": 27,
                "value": "# the \u0027params\u0027 keyword takes json, and will ignore any key that has a null value"
              }
            ],
            "line": 28,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13287747,
              "status": "passed"
            },
            "line": 29,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 29,
              "value": "13:17:34.525 request:\n1 \u003e GET http://127.0.0.1:58351/search?active\u003dfalse\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.537 response time in milliseconds: 11\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:33 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"active\":[\"false\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 111318,
              "status": "passed"
            },
            "line": 30,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1614175,
              "status": "passed"
            },
            "line": 32,
            "name": "assert getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027name\u0027) \u003d\u003d query.name",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1328547,
              "status": "passed"
            },
            "line": 33,
            "name": "assert getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027country\u0027) \u003d\u003d query.country",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1375379,
              "status": "passed"
            },
            "line": 34,
            "name": "assert getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027active\u0027) \u003d\u003d query.active",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1091750,
              "status": "passed"
            },
            "line": 35,
            "name": "assert getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
            "match": {
              "arguments": [
                {
                  "val": "getResponseParam(\u0027limit\u0027) \u003d\u003d query.limit",
                  "offset": 7
                }
              ],
              "location": "StepDefs.asssertBoolean(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 226281,
              "status": "passed"
            },
            "comments": [
              {
                "line": 37,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 38,
            "name": "match response !contains { \u0027limit\u0027: \u0027#notnull\u0027 }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " { \u0027limit\u0027: \u0027#notnull\u0027 }",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 34907664,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 64,
        "name": "here the parameters are set to null within the \u0027Examples\u0027 table itself",
        "description": "",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;here-the-parameters-are-set-to-null-within-the-\u0027examples\u0027-table-itself;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 189356,
              "status": "passed"
            },
            "comments": [
              {
                "line": 49,
                "value": "# notice how this is different from the above, the quotes come from the \u0027Examples\u0027 section"
              }
            ],
            "line": 50,
            "name": "def query \u003d { name: \u0027foo\u0027, country: \u0027IN\u0027, active: true, limit: 1 }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027foo\u0027, country: \u0027IN\u0027, active: true, limit: 1 }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 289166,
              "status": "passed"
            },
            "line": 51,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 51,
              "value": "13:17:34.585 [print] {\n  \"name\": \"foo\",\n  \"country\": \"IN\",\n  \"active\": true,\n  \"limit\": 1\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 590650,
              "status": "passed"
            },
            "line": 53,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 183783,
              "status": "passed"
            },
            "line": 54,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9369382,
              "status": "passed"
            },
            "line": 55,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 55,
              "value": "13:17:34.589 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dfoo\u0026country\u003dIN\u0026active\u003dtrue\u0026limit\u003d1\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.596 response time in milliseconds: 6\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:33 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"foo\"],\"country\":[\"IN\"],\"active\":[\"true\"],\"limit\":[\"1\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 122697,
              "status": "passed"
            },
            "line": 56,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 366982,
              "status": "passed"
            },
            "comments": [
              {
                "line": 57,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 58,
            "name": "match response !contains {}",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " {}",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 7603043,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 65,
        "name": "here the parameters are set to null within the \u0027Examples\u0027 table itself",
        "description": "",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;here-the-parameters-are-set-to-null-within-the-\u0027examples\u0027-table-itself;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 110333,
              "status": "passed"
            },
            "comments": [
              {
                "line": 49,
                "value": "# notice how this is different from the above, the quotes come from the \u0027Examples\u0027 section"
              }
            ],
            "line": 50,
            "name": "def query \u003d { name: \u0027bar\u0027, country: null, active: null, limit: 5 }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027bar\u0027, country: null, active: null, limit: 5 }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 333486,
              "status": "passed"
            },
            "line": 51,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 51,
              "value": "13:17:34.607 [print] {\n  \"name\": \"bar\",\n  \"country\": null,\n  \"active\": null,\n  \"limit\": 5\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 4010300,
              "status": "passed"
            },
            "line": 53,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 140568,
              "status": "passed"
            },
            "line": 54,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7557306,
              "status": "passed"
            },
            "line": 55,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 55,
              "value": "13:17:34.614 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dbar\u0026limit\u003d5\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.619 response time in milliseconds: 5\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:33 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"bar\"],\"limit\":[\"5\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 50872,
              "status": "passed"
            },
            "line": 56,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 249987,
              "status": "passed"
            },
            "comments": [
              {
                "line": 57,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 58,
            "name": "match response !contains { country: \u0027#notnull\u0027, active: \u0027#notnull\u0027 }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " { country: \u0027#notnull\u0027, active: \u0027#notnull\u0027 }",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 7356202,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 66,
        "name": "here the parameters are set to null within the \u0027Examples\u0027 table itself",
        "description": "",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;here-the-parameters-are-set-to-null-within-the-\u0027examples\u0027-table-itself;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 289597,
              "status": "passed"
            },
            "comments": [
              {
                "line": 49,
                "value": "# notice how this is different from the above, the quotes come from the \u0027Examples\u0027 section"
              }
            ],
            "line": 50,
            "name": "def query \u003d { name: \u0027baz\u0027, country: \u0027JP\u0027, active: null, limit: null }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027baz\u0027, country: \u0027JP\u0027, active: null, limit: null }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 610859,
              "status": "passed"
            },
            "line": 51,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 51,
              "value": "13:17:34.630 [print] {\n  \"name\": \"baz\",\n  \"country\": \"JP\",\n  \"active\": null,\n  \"limit\": null\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 419688,
              "status": "passed"
            },
            "line": 53,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 125052,
              "status": "passed"
            },
            "line": 54,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8198195,
              "status": "passed"
            },
            "line": 55,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 55,
              "value": "13:17:34.634 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dbaz\u0026country\u003dJP\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.640 response time in milliseconds: 5\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:33 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"baz\"],\"country\":[\"JP\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 41909,
              "status": "passed"
            },
            "line": 56,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 203825,
              "status": "passed"
            },
            "comments": [
              {
                "line": 57,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 58,
            "name": "match response !contains { active: \u0027#notnull\u0027, limit: \u0027#notnull\u0027 }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " { active: \u0027#notnull\u0027, limit: \u0027#notnull\u0027 }",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 12342298,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 67,
        "name": "here the parameters are set to null within the \u0027Examples\u0027 table itself",
        "description": "",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;here-the-parameters-are-set-to-null-within-the-\u0027examples\u0027-table-itself;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 186415,
              "status": "passed"
            },
            "comments": [
              {
                "line": 49,
                "value": "# notice how this is different from the above, the quotes come from the \u0027Examples\u0027 section"
              }
            ],
            "line": 50,
            "name": "def query \u003d { name: null, country: \u0027US\u0027, active: null, limit: 3 }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: null, country: \u0027US\u0027, active: null, limit: 3 }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 454485,
              "status": "passed"
            },
            "line": 51,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 51,
              "value": "13:17:34.655 [print] {\n  \"name\": null,\n  \"country\": \"US\",\n  \"active\": null,\n  \"limit\": 3\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 226433,
              "status": "passed"
            },
            "line": 53,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 86358,
              "status": "passed"
            },
            "line": 54,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7266146,
              "status": "passed"
            },
            "line": 55,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 55,
              "value": "13:17:34.658 request:\n1 \u003e GET http://127.0.0.1:58351/search?country\u003dUS\u0026limit\u003d3\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.663 response time in milliseconds: 5\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"country\":[\"US\"],\"limit\":[\"3\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 94741,
              "status": "passed"
            },
            "line": 56,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 164770,
              "status": "passed"
            },
            "comments": [
              {
                "line": 57,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 58,
            "name": "match response !contains { name: \u0027#notnull\u0027, active: \u0027#notnull\u0027 }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " { name: \u0027#notnull\u0027, active: \u0027#notnull\u0027 }",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 10239732,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 68,
        "name": "here the parameters are set to null within the \u0027Examples\u0027 table itself",
        "description": "",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;here-the-parameters-are-set-to-null-within-the-\u0027examples\u0027-table-itself;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 134078,
              "status": "passed"
            },
            "comments": [
              {
                "line": 49,
                "value": "# notice how this is different from the above, the quotes come from the \u0027Examples\u0027 section"
              }
            ],
            "line": 50,
            "name": "def query \u003d { name: null, country: null, active: false, limit: null }",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 4
                },
                {
                  "val": "{ name: null, country: null, active: false, limit: null }",
                  "offset": 12
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 409667,
              "status": "passed"
            },
            "line": 51,
            "name": "print query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 51,
              "value": "13:17:34.676 [print] {\n  \"name\": null,\n  \"country\": null,\n  \"active\": false,\n  \"limit\": null\n}\n\n"
            }
          },
          {
            "result": {
              "duration": 276290,
              "status": "passed"
            },
            "line": 53,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 106312,
              "status": "passed"
            },
            "line": 54,
            "name": "params query",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8207406,
              "status": "passed"
            },
            "line": 55,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 55,
              "value": "13:17:34.680 request:\n1 \u003e GET http://127.0.0.1:58351/search?active\u003dfalse\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.685 response time in milliseconds: 5\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"active\":[\"false\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 66238,
              "status": "passed"
            },
            "line": 56,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 190761,
              "status": "passed"
            },
            "comments": [
              {
                "line": 57,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 58,
            "name": "match response !contains { name: \u0027#notnull\u0027, country: \u0027#notnull\u0027, limit: \u0027#notnull\u0027 }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " { name: \u0027#notnull\u0027, country: \u0027#notnull\u0027, limit: \u0027#notnull\u0027 }",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 14217711,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 70,
        "name": "using a data-driven called feature instead of a scenario outline",
        "description": "  this and the above example are the two fundamentally different ways of \n  data-driven test \u0027looping\u0027 in Karate",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;using-a-data-driven-called-feature-instead-of-a-scenario-outline",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 23565904,
              "status": "passed"
            },
            "line": 74,
            "name": "table data",
            "match": {
              "arguments": [
                {
                  "val": "data",
                  "offset": 6
                }
              ],
              "location": "StepDefs.table(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "name",
                  "country",
                  "active",
                  "limit",
                  "missing"
                ],
                "line": 75
              },
              {
                "cells": [
                  "\u0027foo\u0027",
                  "\u0027IN\u0027",
                  "true",
                  "1",
                  "[]"
                ],
                "line": 76
              },
              {
                "cells": [
                  "\u0027bar\u0027",
                  "",
                  "",
                  "5",
                  "[\u0027country\u0027, \u0027active\u0027]"
                ],
                "line": 77
              },
              {
                "cells": [
                  "\u0027baz\u0027",
                  "\u0027JP\u0027",
                  "",
                  "",
                  "[\u0027active\u0027, \u0027limit\u0027]"
                ],
                "line": 78
              },
              {
                "cells": [
                  "",
                  "\u0027US\u0027",
                  "",
                  "3",
                  "[\u0027name\u0027, \u0027active\u0027]"
                ],
                "line": 79
              },
              {
                "cells": [
                  "",
                  "",
                  "false",
                  "",
                  "[\u0027name\u0027, \u0027country\u0027, \u0027limit\u0027]"
                ],
                "line": 80
              }
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[0] search-complex.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"name\": \"foo\",\n  \"country\": \"IN\",\n  \"active\": true,\n  \"limit\": 1,\n  \"missing\": [\n  ]\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 5,
                "value": "# pre-process call argument"
              }
            ],
            "line": 6,
            "name": "def search \u003d __arg",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 4
                },
                {
                  "val": "__arg",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "remove search.missing",
            "match": {
              "arguments": [
                {
                  "val": "search.missing",
                  "offset": 7
                },
                {}
              ],
              "location": "StepDefs.removeByPath(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "params search",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 12,
              "value": "13:17:34.738 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dfoo\u0026country\u003dIN\u0026active\u003dtrue\u0026limit\u003d1\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.740 response time in milliseconds: 2\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"foo\"],\"country\":[\"IN\"],\"active\":[\"true\"],\"limit\":[\"1\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# \u0027#[1]\u0027 means validate if an array, and length is 1"
              }
            ],
            "line": 16,
            "name": "def exists \u003d function(v){ return v ? \u0027#[1]\u0027 : null }",
            "match": {
              "arguments": [
                {
                  "val": "exists",
                  "offset": 4
                },
                {
                  "val": "function(v){ return v ? \u0027#[1]\u0027 : null }",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# besides the built-in variable \u0027__arg\u0027, each key within it is available by name"
              },
              {
                "line": 19,
                "value": "# note how the \u0027##\u0027 marker is used to auto-remove BEFORE the match"
              },
              {
                "line": 20,
                "value": "# there are simpler ways to do this, but just for demo"
              }
            ],
            "line": 21,
            "name": "def expected \u003d { name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "expected",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
                  "offset": 15
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 24,
                "value": "# demo of how to turn an array of strings into json keys"
              }
            ],
            "line": 25,
            "name": "def fun \u003d",
            "match": {
              "arguments": [
                {
                  "val": "fun",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 26,
              "value": "function(arr) {\n  var res \u003d {};\n  for (var i \u003d 0; i \u003c arr.length; i++) {\n    var key \u003d arr[i];\n    res[key] \u003d \u0027#notnull\u0027;\n  }\n  return res;\n}"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 36,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 37,
            "name": "match response !contains fun(missing)",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " fun(missing)",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[1] search-complex.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"name\": \"bar\",\n  \"limit\": 5,\n  \"missing\": [\n    \"country\",\n    \"active\"\n  ]\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 5,
                "value": "# pre-process call argument"
              }
            ],
            "line": 6,
            "name": "def search \u003d __arg",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 4
                },
                {
                  "val": "__arg",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "remove search.missing",
            "match": {
              "arguments": [
                {
                  "val": "search.missing",
                  "offset": 7
                },
                {}
              ],
              "location": "StepDefs.removeByPath(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "params search",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 12,
              "value": "13:17:34.830 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dbar\u0026limit\u003d5\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.835 response time in milliseconds: 4\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"bar\"],\"limit\":[\"5\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# \u0027#[1]\u0027 means validate if an array, and length is 1"
              }
            ],
            "line": 16,
            "name": "def exists \u003d function(v){ return v ? \u0027#[1]\u0027 : null }",
            "match": {
              "arguments": [
                {
                  "val": "exists",
                  "offset": 4
                },
                {
                  "val": "function(v){ return v ? \u0027#[1]\u0027 : null }",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# besides the built-in variable \u0027__arg\u0027, each key within it is available by name"
              },
              {
                "line": 19,
                "value": "# note how the \u0027##\u0027 marker is used to auto-remove BEFORE the match"
              },
              {
                "line": 20,
                "value": "# there are simpler ways to do this, but just for demo"
              }
            ],
            "line": 21,
            "name": "def expected \u003d { name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "expected",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
                  "offset": 15
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 24,
                "value": "# demo of how to turn an array of strings into json keys"
              }
            ],
            "line": 25,
            "name": "def fun \u003d",
            "match": {
              "arguments": [
                {
                  "val": "fun",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 26,
              "value": "function(arr) {\n  var res \u003d {};\n  for (var i \u003d 0; i \u003c arr.length; i++) {\n    var key \u003d arr[i];\n    res[key] \u003d \u0027#notnull\u0027;\n  }\n  return res;\n}"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 36,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 37,
            "name": "match response !contains fun(missing)",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " fun(missing)",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[2] search-complex.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"name\": \"baz\",\n  \"country\": \"JP\",\n  \"missing\": [\n    \"active\",\n    \"limit\"\n  ]\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 5,
                "value": "# pre-process call argument"
              }
            ],
            "line": 6,
            "name": "def search \u003d __arg",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 4
                },
                {
                  "val": "__arg",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "remove search.missing",
            "match": {
              "arguments": [
                {
                  "val": "search.missing",
                  "offset": 7
                },
                {}
              ],
              "location": "StepDefs.removeByPath(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "params search",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 12,
              "value": "13:17:34.870 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dbaz\u0026country\u003dJP\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.875 response time in milliseconds: 5\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"baz\"],\"country\":[\"JP\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# \u0027#[1]\u0027 means validate if an array, and length is 1"
              }
            ],
            "line": 16,
            "name": "def exists \u003d function(v){ return v ? \u0027#[1]\u0027 : null }",
            "match": {
              "arguments": [
                {
                  "val": "exists",
                  "offset": 4
                },
                {
                  "val": "function(v){ return v ? \u0027#[1]\u0027 : null }",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# besides the built-in variable \u0027__arg\u0027, each key within it is available by name"
              },
              {
                "line": 19,
                "value": "# note how the \u0027##\u0027 marker is used to auto-remove BEFORE the match"
              },
              {
                "line": 20,
                "value": "# there are simpler ways to do this, but just for demo"
              }
            ],
            "line": 21,
            "name": "def expected \u003d { name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "expected",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
                  "offset": 15
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 24,
                "value": "# demo of how to turn an array of strings into json keys"
              }
            ],
            "line": 25,
            "name": "def fun \u003d",
            "match": {
              "arguments": [
                {
                  "val": "fun",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 26,
              "value": "function(arr) {\n  var res \u003d {};\n  for (var i \u003d 0; i \u003c arr.length; i++) {\n    var key \u003d arr[i];\n    res[key] \u003d \u0027#notnull\u0027;\n  }\n  return res;\n}"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 36,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 37,
            "name": "match response !contains fun(missing)",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " fun(missing)",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[3] search-complex.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"country\": \"US\",\n  \"limit\": 3,\n  \"missing\": [\n    \"name\",\n    \"active\"\n  ]\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 5,
                "value": "# pre-process call argument"
              }
            ],
            "line": 6,
            "name": "def search \u003d __arg",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 4
                },
                {
                  "val": "__arg",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "remove search.missing",
            "match": {
              "arguments": [
                {
                  "val": "search.missing",
                  "offset": 7
                },
                {}
              ],
              "location": "StepDefs.removeByPath(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "params search",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 12,
              "value": "13:17:34.893 request:\n1 \u003e GET http://127.0.0.1:58351/search?country\u003dUS\u0026limit\u003d3\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.899 response time in milliseconds: 6\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"country\":[\"US\"],\"limit\":[\"3\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# \u0027#[1]\u0027 means validate if an array, and length is 1"
              }
            ],
            "line": 16,
            "name": "def exists \u003d function(v){ return v ? \u0027#[1]\u0027 : null }",
            "match": {
              "arguments": [
                {
                  "val": "exists",
                  "offset": 4
                },
                {
                  "val": "function(v){ return v ? \u0027#[1]\u0027 : null }",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# besides the built-in variable \u0027__arg\u0027, each key within it is available by name"
              },
              {
                "line": 19,
                "value": "# note how the \u0027##\u0027 marker is used to auto-remove BEFORE the match"
              },
              {
                "line": 20,
                "value": "# there are simpler ways to do this, but just for demo"
              }
            ],
            "line": 21,
            "name": "def expected \u003d { name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "expected",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
                  "offset": 15
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 24,
                "value": "# demo of how to turn an array of strings into json keys"
              }
            ],
            "line": 25,
            "name": "def fun \u003d",
            "match": {
              "arguments": [
                {
                  "val": "fun",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 26,
              "value": "function(arr) {\n  var res \u003d {};\n  for (var i \u003d 0; i \u003c arr.length; i++) {\n    var key \u003d arr[i];\n    res[key] \u003d \u0027#notnull\u0027;\n  }\n  return res;\n}"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 36,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 37,
            "name": "match response !contains fun(missing)",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " fun(missing)",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[4] search-complex.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"active\": false,\n  \"missing\": [\n    \"name\",\n    \"country\",\n    \"limit\"\n  ]\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 5,
                "value": "# pre-process call argument"
              }
            ],
            "line": 6,
            "name": "def search \u003d __arg",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 4
                },
                {
                  "val": "__arg",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "remove search.missing",
            "match": {
              "arguments": [
                {
                  "val": "search.missing",
                  "offset": 7
                },
                {}
              ],
              "location": "StepDefs.removeByPath(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "params search",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 12,
              "value": "13:17:34.911 request:\n1 \u003e GET http://127.0.0.1:58351/search?active\u003dfalse\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.913 response time in milliseconds: 2\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"active\":[\"false\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# \u0027#[1]\u0027 means validate if an array, and length is 1"
              }
            ],
            "line": 16,
            "name": "def exists \u003d function(v){ return v ? \u0027#[1]\u0027 : null }",
            "match": {
              "arguments": [
                {
                  "val": "exists",
                  "offset": 4
                },
                {
                  "val": "function(v){ return v ? \u0027#[1]\u0027 : null }",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# besides the built-in variable \u0027__arg\u0027, each key within it is available by name"
              },
              {
                "line": 19,
                "value": "# note how the \u0027##\u0027 marker is used to auto-remove BEFORE the match"
              },
              {
                "line": 20,
                "value": "# there are simpler ways to do this, but just for demo"
              }
            ],
            "line": 21,
            "name": "def expected \u003d { name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "expected",
                  "offset": 4
                },
                {
                  "val": "{ name: \u0027##(exists(name))\u0027, country: \u0027##(exists(country))\u0027, active: \u0027##(exists(active))\u0027, limit: \u0027##(exists(limit))\u0027 }",
                  "offset": 15
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 24,
                "value": "# demo of how to turn an array of strings into json keys"
              }
            ],
            "line": 25,
            "name": "def fun \u003d",
            "match": {
              "arguments": [
                {
                  "val": "fun",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 26,
              "value": "function(arr) {\n  var res \u003d {};\n  for (var i \u003d 0; i \u003c arr.length; i++) {\n    var key \u003d arr[i];\n    res[key] \u003d \u0027#notnull\u0027;\n  }\n  return res;\n}"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 36,
                "value": "# response should NOT contain a key expected to be missing"
              }
            ],
            "line": 37,
            "name": "match response !contains fun(missing)",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " fun(missing)",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 192780368,
              "status": "passed"
            },
            "comments": [
              {
                "line": 82,
                "value": "# the assertions in the called feature use some js for the sake of demo"
              },
              {
                "line": 83,
                "value": "# but the next scenario below is far simpler and does not use js at all"
              }
            ],
            "line": 84,
            "name": "def result \u003d call read(\u0027search-complex.feature\u0027) data",
            "match": {
              "arguments": [
                {
                  "val": "result",
                  "offset": 4
                },
                {
                  "val": "call read(\u0027search-complex.feature\u0027) data",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 4262957,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 86,
        "name": "using the set keyword to build json and nulls are skipped by default",
        "description": "  this is possibly the simplest form of all the above, avoiding any javascript\n  but does require however - a \u0027call\u0027 to a second feature file",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;using-the-set-keyword-to-build-json-and-nulls-are-skipped-by-default",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3002289,
              "status": "passed"
            },
            "comments": [
              {
                "line": 90,
                "value": "# table would have been sufficient below, but here we demo how \u0027set\u0027 is simply a \u0027transpose\u0027 of table"
              }
            ],
            "line": 91,
            "name": "set data",
            "match": {
              "arguments": [
                {
                  "val": "data",
                  "offset": 4
                },
                {}
              ],
              "location": "StepDefs.setByPathTable(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "path",
                  "0",
                  "1",
                  "2",
                  "3",
                  "4"
                ],
                "line": 92
              },
              {
                "cells": [
                  "name",
                  "\u0027foo\u0027",
                  "\u0027bar\u0027",
                  "\u0027baz\u0027",
                  "",
                  ""
                ],
                "line": 93
              },
              {
                "cells": [
                  "country",
                  "\u0027IN\u0027",
                  "",
                  "\u0027JP\u0027",
                  "\u0027US\u0027",
                  ""
                ],
                "line": 94
              },
              {
                "cells": [
                  "active",
                  "true",
                  "",
                  "",
                  "",
                  "false"
                ],
                "line": 95
              },
              {
                "cells": [
                  "limit",
                  "1",
                  "5",
                  "",
                  "3",
                  ""
                ],
                "line": 96
              }
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 20850042,
              "status": "passed"
            },
            "comments": [
              {
                "line": 98,
                "value": "# note how you can \u0027compose\u0027 complex JSON by referring to existing JSON chunks, e.g: \u0027data[0]\u0027"
              }
            ],
            "line": 99,
            "name": "table search",
            "match": {
              "arguments": [
                {
                  "val": "search",
                  "offset": 6
                }
              ],
              "location": "StepDefs.table(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "params",
                  "expected",
                  "missing"
                ],
                "line": 100
              },
              {
                "cells": [
                  "data[0]",
                  "{ name: \u0027#[1]\u0027, country: \u0027#[1]\u0027, active: \u0027#[1]\u0027, limit: \u0027#[1]\u0027 }",
                  "{}"
                ],
                "line": 101
              },
              {
                "cells": [
                  "data[1]",
                  "{ name: [\u0027bar\u0027], limit: [\u00275\u0027] }",
                  "{ country: \u0027#notnull\u0027, active: \u0027#notnull\u0027 }"
                ],
                "line": 102
              },
              {
                "cells": [
                  "data[2]",
                  "{ name: [\u0027#(data[2].name)\u0027], country: [\u0027#(data[2].country)\u0027] }",
                  "{ active: \u0027#notnull\u0027, limit: \u0027#notnull\u0027 }"
                ],
                "line": 103
              },
              {
                "cells": [
                  "data[3]",
                  "{ country: \u0027#[1]\u0027, limit: \u0027#[1]\u0027 }",
                  "{ name: \u0027#notnull\u0027, active: \u0027#notnull\u0027 }"
                ],
                "line": 104
              },
              {
                "cells": [
                  "data[4]",
                  "{ active: \u0027#[1]\u0027 }",
                  "{ name: \u0027#notnull\u0027, country: \u0027#notnull\u0027, limit: \u0027#notnull\u0027 }"
                ],
                "line": 105
              }
            ],
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[0] search-simple.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"params\": {\n    \"name\": \"foo\",\n    \"country\": \"IN\",\n    \"active\": true,\n    \"limit\": 1\n  },\n  \"expected\": {\n    \"name\": \"#[1]\",\n    \"country\": \"#[1]\",\n    \"active\": \"#[1]\",\n    \"limit\": \"#[1]\"\n  },\n  \"missing\": {\n  }\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "params params",
            "match": {
              "arguments": [
                {
                  "val": "params",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 9,
              "value": "13:17:34.969 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dfoo\u0026country\u003dIN\u0026active\u003dtrue\u0026limit\u003d1\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.975 response time in milliseconds: 5\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"foo\"],\"country\":[\"IN\"],\"active\":[\"true\"],\"limit\":[\"1\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "match response !contains missing",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " missing",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[1] search-simple.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"params\": {\n    \"name\": \"bar\",\n    \"limit\": 5\n  },\n  \"expected\": {\n    \"name\": [\n      \"bar\"\n    ],\n    \"limit\": [\n      \"5\"\n    ]\n  },\n  \"missing\": {\n    \"country\": \"#notnull\",\n    \"active\": \"#notnull\"\n  }\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "params params",
            "match": {
              "arguments": [
                {
                  "val": "params",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 9,
              "value": "13:17:34.992 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dbar\u0026limit\u003d5\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:34.999 response time in milliseconds: 6\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"bar\"],\"limit\":[\"5\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "match response !contains missing",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " missing",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[2] search-simple.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"params\": {\n    \"name\": \"baz\",\n    \"country\": \"JP\"\n  },\n  \"expected\": {\n    \"name\": [\n      \"baz\"\n    ],\n    \"country\": [\n      \"JP\"\n    ]\n  },\n  \"missing\": {\n    \"active\": \"#notnull\",\n    \"limit\": \"#notnull\"\n  }\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "params params",
            "match": {
              "arguments": [
                {
                  "val": "params",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 9,
              "value": "13:17:35.013 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003dbaz\u0026country\u003dJP\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:35.017 response time in milliseconds: 4\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"baz\"],\"country\":[\"JP\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "match response !contains missing",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " missing",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[3] search-simple.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"params\": {\n    \"country\": \"US\",\n    \"limit\": 3\n  },\n  \"expected\": {\n    \"country\": \"#[1]\",\n    \"limit\": \"#[1]\"\n  },\n  \"missing\": {\n    \"name\": \"#notnull\",\n    \"active\": \"#notnull\"\n  }\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "params params",
            "match": {
              "arguments": [
                {
                  "val": "params",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 9,
              "value": "13:17:35.029 request:\n1 \u003e GET http://127.0.0.1:58351/search?country\u003dUS\u0026limit\u003d3\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:35.035 response time in milliseconds: 5\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"country\":[\"US\"],\"limit\":[\"3\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "match response !contains missing",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " missing",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call[4] search-simple.feature",
            "match": {},
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 0,
              "value": "{\n  \"params\": {\n    \"active\": false\n  },\n  \"expected\": {\n    \"active\": \"#[1]\"\n  },\n  \"missing\": {\n    \"name\": \"#notnull\",\n    \"country\": \"#notnull\",\n    \"limit\": \"#notnull\"\n  }\n}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "params params",
            "match": {
              "arguments": [
                {
                  "val": "params",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 9,
              "value": "13:17:35.055 request:\n1 \u003e GET http://127.0.0.1:58351/search?active\u003dfalse\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:35.063 response time in milliseconds: 6\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"active\":[\"false\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "match response \u003d\u003d expected",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "expected",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "match response !contains missing",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "!",
                  "offset": 15
                },
                {},
                {
                  "val": " missing",
                  "offset": 24
                }
              ],
              "location": "StepDefs.matchContains(String,String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 117689234,
              "status": "passed"
            },
            "line": 107,
            "name": "def result \u003d call read(\u0027search-simple.feature\u0027) search",
            "match": {
              "arguments": [
                {
                  "val": "result",
                  "offset": 4
                },
                {
                  "val": "call read(\u0027search-simple.feature\u0027) search",
                  "offset": 13
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 7268121,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 109,
        "name": "params json with embedded expressions",
        "description": "",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;params-json-with-embedded-expressions",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 129366,
              "status": "passed"
            },
            "line": 110,
            "name": "def data \u003d { one: \u0027one\u0027, two: \u0027two\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "data",
                  "offset": 4
                },
                {
                  "val": "{ one: \u0027one\u0027, two: \u0027two\u0027 }",
                  "offset": 11
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 204097,
              "status": "passed"
            },
            "line": 112,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5069183,
              "status": "passed"
            },
            "comments": [
              {
                "line": 113,
                "value": "# using enclosed javascript instead of an embedded expression for convenience"
              }
            ],
            "line": 114,
            "name": "params ({ name: data.one, country: data.two })",
            "match": {
              "arguments": [
                {
                  "val": "({ name: data.one, country: data.two })",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7196677,
              "status": "passed"
            },
            "line": 115,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 115,
              "value": "13:17:35.081 request:\n1 \u003e GET http://127.0.0.1:58351/search?name\u003done\u0026country\u003dtwo\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:35.086 response time in milliseconds: 4\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"name\":[\"one\"],\"country\":[\"two\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 71100,
              "status": "passed"
            },
            "line": 116,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 617619,
              "status": "passed"
            },
            "line": 117,
            "name": "match response \u003d\u003d { name: [\u0027one\u0027], country: [\u0027two\u0027] }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "{ name: [\u0027one\u0027], country: [\u0027two\u0027] }",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 10625700,
              "status": "passed"
            },
            "line": 5,
            "name": "url demoBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "demoBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "* "
          }
        ]
      },
      {
        "line": 119,
        "name": "test that multi-params work as expected",
        "description": "",
        "id": "dynamic-params-using-scenario-outline,-examples-and-json;test-that-multi-params-work-as-expected",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 402229,
              "status": "passed"
            },
            "line": 121,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1024970,
              "status": "passed"
            },
            "line": 122,
            "name": "param foo \u003d \u0027bar\u0027, \u0027baz\u0027",
            "match": {
              "arguments": [
                {
                  "val": "foo",
                  "offset": 6
                },
                {
                  "val": "\u0027bar\u0027, \u0027baz\u0027",
                  "offset": 12
                }
              ],
              "location": "StepDefs.param(String,String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6957023,
              "status": "passed"
            },
            "line": 123,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 123,
              "value": "13:17:35.105 request:\n1 \u003e GET http://127.0.0.1:58351/search?foo\u003dbar\u0026foo\u003dbaz\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Connection: Keep-Alive\n1 \u003e Host: 127.0.0.1:58351\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:35.110 response time in milliseconds: 4\n1 \u003c 200\n1 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n1 \u003c Content-Type: application/json;charset\u003dUTF-8\n1 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n1 \u003c Expires: 0\n1 \u003c Pragma: no-cache\n1 \u003c Transfer-Encoding: chunked\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Frame-Options: DENY\n1 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"foo\":[\"bar\",\"baz\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 60966,
              "status": "passed"
            },
            "line": 124,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 172322,
              "status": "passed"
            },
            "line": 125,
            "name": "match response \u003d\u003d { foo: [\u0027bar\u0027, \u0027baz\u0027] }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "{ foo: [\u0027bar\u0027, \u0027baz\u0027] }",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 177838,
              "status": "passed"
            },
            "line": 127,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 90594,
              "status": "passed"
            },
            "line": 128,
            "name": "params { foo: [\u0027bar\u0027, \u0027baz\u0027] }",
            "match": {
              "arguments": [
                {
                  "val": "{ foo: [\u0027bar\u0027, \u0027baz\u0027] }",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4224250,
              "status": "passed"
            },
            "line": 129,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 129,
              "value": "13:17:35.112 request:\n2 \u003e GET http://127.0.0.1:58351/search?foo\u003dbar\u0026foo\u003dbaz\n2 \u003e Accept-Encoding: gzip,deflate\n2 \u003e Connection: Keep-Alive\n2 \u003e Host: 127.0.0.1:58351\n2 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:35.115 response time in milliseconds: 3\n2 \u003c 200\n2 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n2 \u003c Content-Type: application/json;charset\u003dUTF-8\n2 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n2 \u003c Expires: 0\n2 \u003c Pragma: no-cache\n2 \u003c Transfer-Encoding: chunked\n2 \u003c X-Content-Type-Options: nosniff\n2 \u003c X-Frame-Options: DENY\n2 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"foo\":[\"bar\",\"baz\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 38409,
              "status": "passed"
            },
            "line": 130,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 149149,
              "status": "passed"
            },
            "line": 131,
            "name": "match response \u003d\u003d { foo: [\u0027bar\u0027, \u0027baz\u0027] }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "{ foo: [\u0027bar\u0027, \u0027baz\u0027] }",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 169310,
              "status": "passed"
            },
            "line": 133,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2436827,
              "status": "passed"
            },
            "line": 134,
            "name": "param foo \u003d \u0027bar,baz\u0027",
            "match": {
              "arguments": [
                {
                  "val": "foo",
                  "offset": 6
                },
                {
                  "val": "\u0027bar,baz\u0027",
                  "offset": 12
                }
              ],
              "location": "StepDefs.param(String,String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2953477,
              "status": "passed"
            },
            "line": 135,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 135,
              "value": "13:17:35.120 request:\n3 \u003e GET http://127.0.0.1:58351/search?foo\u003dbar%2Cbaz\n3 \u003e Accept-Encoding: gzip,deflate\n3 \u003e Connection: Keep-Alive\n3 \u003e Host: 127.0.0.1:58351\n3 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:35.122 response time in milliseconds: 2\n3 \u003c 200\n3 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n3 \u003c Content-Type: application/json;charset\u003dUTF-8\n3 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n3 \u003c Expires: 0\n3 \u003c Pragma: no-cache\n3 \u003c Transfer-Encoding: chunked\n3 \u003c X-Content-Type-Options: nosniff\n3 \u003c X-Frame-Options: DENY\n3 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"foo\":[\"bar,baz\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 39525,
              "status": "passed"
            },
            "line": 136,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 128079,
              "status": "passed"
            },
            "line": 137,
            "name": "match response \u003d\u003d { foo: [\u0027bar,baz\u0027] }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "{ foo: [\u0027bar,baz\u0027] }",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 116161,
              "status": "passed"
            },
            "line": 139,
            "name": "path \u0027search\u0027",
            "match": {
              "arguments": [
                {
                  "val": "\u0027search\u0027",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 55291,
              "status": "passed"
            },
            "line": 140,
            "name": "params { foo: \u0027bar,baz\u0027 }",
            "match": {
              "arguments": [
                {
                  "val": "{ foo: \u0027bar,baz\u0027 }",
                  "offset": 7
                }
              ],
              "location": "StepDefs.params(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3214632,
              "status": "passed"
            },
            "line": 141,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 141,
              "value": "13:17:35.124 request:\n4 \u003e GET http://127.0.0.1:58351/search?foo\u003dbar%2Cbaz\n4 \u003e Accept-Encoding: gzip,deflate\n4 \u003e Connection: Keep-Alive\n4 \u003e Host: 127.0.0.1:58351\n4 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_162)\n\n13:17:35.127 response time in milliseconds: 2\n4 \u003c 200\n4 \u003c Cache-Control: no-cache, no-store, max-age\u003d0, must-revalidate\n4 \u003c Content-Type: application/json;charset\u003dUTF-8\n4 \u003c Date: Thu, 20 Sep 2018 07:32:34 GMT\n4 \u003c Expires: 0\n4 \u003c Pragma: no-cache\n4 \u003c Transfer-Encoding: chunked\n4 \u003c X-Content-Type-Options: nosniff\n4 \u003c X-Frame-Options: DENY\n4 \u003c X-XSS-Protection: 1; mode\u003dblock\n{\"foo\":[\"bar,baz\"]}\n\n"
            }
          },
          {
            "result": {
              "duration": 39669,
              "status": "passed"
            },
            "line": 142,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 148336,
              "status": "passed"
            },
            "line": 143,
            "name": "match response \u003d\u003d { foo: [\u0027bar,baz\u0027] }",
            "match": {
              "arguments": [
                {},
                {
                  "val": "response",
                  "offset": 6
                },
                {},
                {
                  "val": "\u003d\u003d",
                  "offset": 15
                },
                {
                  "val": "{ foo: [\u0027bar,baz\u0027] }",
                  "offset": 18
                }
              ],
              "location": "StepDefs.matchEquals(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "demo/search/dynamic-params.feature",
    "description": "dynamic params using scenario-outline, examples and json\nsee also the file demo/outline/examples.feature",
    "id": "dynamic-params-using-scenario-outline,-examples-and-json",
    "keyword": "Feature",
    "uri": "demo/search/dynamic-params.feature"
  }
]